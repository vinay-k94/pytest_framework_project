{"name": "test_create_duplicate_bunker_enquiry_with_same_fields", "status": "broken", "statusDetails": {"message": "framework.errors.ApiError: Server error 500: {\"message\":\"Unexpected error while creating bunker inquiry.Not found: Port (UNLO: RUSEW) - \"}", "trace": "api = <framework.api_dictionary.ApiDictionary object at 0x0000022FDCBDED80>\n\n    def test_create_duplicate_bunker_enquiry_with_same_fields(api: ApiDictionary):\n        \"\"\"\n            Test Case: List Users API - Validate Response Structure and Content\n    \n            Steps:\n            1. Call the API to fetch a paginated list of users (page=1, size=10).\n            2. Assert that the API call returns HTTP 200 (success).\n            3. Assert that the response is a non-empty list.\n            4. Assert that the\n            first user object contains 'id' and 'name' keys.\n    \n            Purpose:\n            - To verify that the user listing endpoint returns valid data and expected structure.\n            - To ensure basic integrity of the user objects in the response.\n    \n            args: api (ApiDictionary): The API client instance for making requests.\n        \"\"\"\n    \n        api.bunker.get_vessels()\n        vessel_imo = api.bunker.get_random_vessels_imo()\n        api.bunker.get_customers()\n        customer_id = api.bunker.get_random_customer_id()\n        api.bunker.get_port()\n        port_unlocode = api.bunker.get_random_ports_unlocode()\n        api.bunker.get_bunker_details()\n        external_id, sulphur_external_id = api.bunker.get_external_and_sulphur_id()\n    \n        delivery_start = datetime.now(timezone.utc)  # timezone-aware datetime\n        delivery_end = delivery_start + timedelta(days=4)  # add 4 days\n    \n        delivery_start_str = delivery_start.isoformat().replace(\"+00:00\", \"Z\")\n        delivery_end_str = delivery_end.isoformat().replace(\"+00:00\", \"Z\")\n        quantity_max = 555\n        api.bunker.generate_payload_bunker_enquiry_create(customer_id, vessel_imo, port_unlocode,\n                                                          external_id, sulphur_external_id,\n                                                          delivery_start_str, delivery_end_str, quantity_max)\n>       api.bunker.create_bunker_enquiry(200)\n\ntests\\test_api\\test_bunkers\\test_create_bunker_enquiry.py:84: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\api\\bunker.py:118: in create_bunker_enquiry\n    self.last_response = self.client.post(\nframework\\api_client.py:79: in post\n    return self.request(\"POST\", path, json=json, data=data, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <framework.api_client.ApiClient object at 0x0000022FDCBDD370>, method = 'POST', path = '/api/bunker/create-inquiry'\nkwargs = {'data': None, 'json': {'customer_id': 'C6419808-5AA1-64D8-8FC9-3A1979CE5A15', 'delivery_end_date': '2025-09-22T14:19:...DC4', 'quantity_max': 555, 'quantity_min': None, 'sulphur_external_id': 'BEA831A6-D644-09AC-12EB-3A0FB84251E7'}], ...}}\nurl = 'https://one.geoserves-test.com/api/bunker/create-inquiry'\nheaders = {'Accept': '*/*', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InNhbWlzaHJhQGdldC1kbWNjLm....FURSJZKDurQEKlgMcaOPEyDxqJTRUMq5hkAMiXptCtI', 'Content-Type': 'application/json', 'User-Agent': 'python-requests/2.x'}\nresp = <Response [500]>\n\n    def request(self, method: str, path: str, **kwargs) -> requests.Response:\n        \"\"\"\n        Make a generic HTTP request using the specified method and path.\n        Handles authentication headers and error handling.\n        \"\"\"\n        url = self._full_url(path)\n        headers = kwargs.pop(\"headers\", {})\n        headers.update(self._auth_header())\n        try:\n            resp = self.session.request(method, url, headers=headers, timeout=self.timeout, **kwargs)\n        except requests.RequestException as e:\n            raise ApiError(f\"HTTP request failed: {e}\")\n        if resp.status_code >= 500:\n>           raise ApiError(f\"Server error {resp.status_code}: {resp.text}\")\nE           framework.errors.ApiError: Server error 500: {\"message\":\"Unexpected error while creating bunker inquiry.Not found: Port (UNLO: RUSEW) - \"}\n\nframework\\api_client.py:66: ApiError"}, "description": "\n        Test Case: List Users API - Validate Response Structure and Content\n\n        Steps:\n        1. Call the API to fetch a paginated list of users (page=1, size=10).\n        2. Assert that the API call returns HTTP 200 (success).\n        3. Assert that the response is a non-empty list.\n        4. Assert that the\n        first user object contains 'id' and 'name' keys.\n\n        Purpose:\n        - To verify that the user listing endpoint returns valid data and expected structure.\n        - To ensure basic integrity of the user objects in the response.\n\n        args: api (ApiDictionary): The API client instance for making requests.\n    ", "attachments": [{"name": "log", "source": "ac44c0b9-03a5-4fdc-8f93-50283d1f0fb7-attachment.txt", "type": "text/plain"}], "start": 1758205155795, "stop": 1758205156434, "uuid": "d4b2df52-b5ad-443c-b195-5c64c2bd4218", "historyId": "c8d26f0e515ce75385bb74ead39f0506", "testCaseId": "c8d26f0e515ce75385bb74ead39f0506", "fullName": "tests.test_api.test_bunkers.test_create_bunker_enquiry#test_create_duplicate_bunker_enquiry_with_same_fields", "labels": [{"name": "parentSuite", "value": "tests.test_api.test_bunkers"}, {"name": "suite", "value": "test_create_bunker_enquiry"}, {"name": "host", "value": "DESKTOP-52L9BJU"}, {"name": "thread", "value": "17880-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_api.test_bunkers.test_create_bunker_enquiry"}], "titlePath": ["tests", "test_api", "test_bunkers", "test_create_bunker_enquiry.py"]}