{"uid":"3369e0f59ff51e48","name":"test_create_bunker_enquiry_with_invalid_mandatory_fields","fullName":"tests.test_api.test_bunkers.test_create_bunker_enquiry#test_create_bunker_enquiry_with_invalid_mandatory_fields","historyId":"7151f2d8ce8f472c0e88e59a4f2a3e4b","time":{"start":1758205156467,"stop":1758205157222,"duration":755},"description":"\n        Test Case: List Users API - Validate Response Structure and Content\n\n        Steps:\n        1. Call the API to fetch a paginated list of users (page=1, size=10).\n        2. Assert that the API call returns HTTP 200 (success).\n        3. Assert that the response is a non-empty list.\n        4. Assert that the\n        first user object contains 'id' and 'name' keys.\n\n        Purpose:\n        - To verify that the user listing endpoint returns valid data and expected structure.\n        - To ensure basic integrity of the user objects in the response.\n\n        args: api (ApiDictionary): The API client instance for making requests.\n    ","descriptionHtml":"<pre><code>    Test Case: List Users API - Validate Response Structure and Content\n\n    Steps:\n    1. Call the API to fetch a paginated list of users (page=1, size=10).\n    2. Assert that the API call returns HTTP 200 (success).\n    3. Assert that the response is a non-empty list.\n    4. Assert that the\n    first user object contains 'id' and 'name' keys.\n\n    Purpose:\n    - To verify that the user listing endpoint returns valid data and expected structure.\n    - To ensure basic integrity of the user objects in the response.\n\n    args: api (ApiDictionary): The API client instance for making requests.\n</code></pre>\n","status":"broken","statusMessage":"framework.errors.ApiError: Server error 500: {\"message\":\"Unexpected error while creating bunker inquiry.Not found: Port (UNLO: 1111111) - \"}","statusTrace":"api = <framework.api_dictionary.ApiDictionary object at 0x0000022FDCBDED80>\n\n    def test_create_bunker_enquiry_with_invalid_mandatory_fields(api: ApiDictionary):\n        \"\"\"\n            Test Case: List Users API - Validate Response Structure and Content\n    \n            Steps:\n            1. Call the API to fetch a paginated list of users (page=1, size=10).\n            2. Assert that the API call returns HTTP 200 (success).\n            3. Assert that the response is a non-empty list.\n            4. Assert that the\n            first user object contains 'id' and 'name' keys.\n    \n            Purpose:\n            - To verify that the user listing endpoint returns valid data and expected structure.\n            - To ensure basic integrity of the user objects in the response.\n    \n            args: api (ApiDictionary): The API client instance for making requests.\n        \"\"\"\n    \n        api.bunker.get_vessels()\n        vessel_imo = api.bunker.get_random_vessels_imo()\n        api.bunker.get_customers()\n        customer_id = api.bunker.get_random_customer_id()\n        api.bunker.get_port()\n        port_unlocode = api.bunker.get_random_ports_unlocode()\n        api.bunker.get_bunker_details()\n        external_id, sulphur_external_id = api.bunker.get_external_and_sulphur_id()\n    \n        delivery_start = datetime.now(timezone.utc)  # timezone-aware datetime\n        delivery_end = delivery_start + timedelta(days=4)  # add 4 days\n    \n        delivery_start_str = delivery_start.isoformat().replace(\"+00:00\", \"Z\")\n        delivery_end_str = delivery_end.isoformat().replace(\"+00:00\", \"Z\")\n        quantity_max = 555\n        # Invalid Customer ID Field\n        api.bunker.generate_payload_bunker_enquiry_create(\"111111\", vessel_imo, port_unlocode,\n                                                          external_id, sulphur_external_id,\n                                                          delivery_start_str, delivery_end_str, quantity_max)\n        api.bunker.create_bunker_enquiry(400)\n        # Invalid Vessel IMO Field --- Backend issue getting 500 instead of 400\n        api.bunker.generate_payload_bunker_enquiry_create(customer_id, \"1111111\", port_unlocode,\n                                                          external_id, sulphur_external_id,\n                                                          delivery_start_str, delivery_end_str, quantity_max)\n        # api.bunker.create_bunker_enquiry(400)\n    \n        # Invalid Port Unlocode Field\n        api.bunker.generate_payload_bunker_enquiry_create(customer_id, vessel_imo, \"1111111\",\n                                                          external_id, sulphur_external_id,\n                                                          delivery_start_str, delivery_end_str, quantity_max)\n>       api.bunker.create_bunker_enquiry(500)\n\ntests\\test_api\\test_bunkers\\test_create_bunker_enquiry.py:137: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\api\\bunker.py:118: in create_bunker_enquiry\n    self.last_response = self.client.post(\nframework\\api_client.py:79: in post\n    return self.request(\"POST\", path, json=json, data=data, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <framework.api_client.ApiClient object at 0x0000022FDCBDD370>, method = 'POST', path = '/api/bunker/create-inquiry'\nkwargs = {'data': None, 'json': {'customer_id': '1FB42898-22F1-4C45-9E69-12779C45A6E3', 'delivery_end_date': '2025-09-22T14:19:...8F8', 'quantity_max': 555, 'quantity_min': None, 'sulphur_external_id': '83FBCC23-AE7D-00C0-DB45-3A19E59B0A43'}], ...}}\nurl = 'https://one.geoserves-test.com/api/bunker/create-inquiry'\nheaders = {'Accept': '*/*', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InNhbWlzaHJhQGdldC1kbWNjLm....FURSJZKDurQEKlgMcaOPEyDxqJTRUMq5hkAMiXptCtI', 'Content-Type': 'application/json', 'User-Agent': 'python-requests/2.x'}\nresp = <Response [500]>\n\n    def request(self, method: str, path: str, **kwargs) -> requests.Response:\n        \"\"\"\n        Make a generic HTTP request using the specified method and path.\n        Handles authentication headers and error handling.\n        \"\"\"\n        url = self._full_url(path)\n        headers = kwargs.pop(\"headers\", {})\n        headers.update(self._auth_header())\n        try:\n            resp = self.session.request(method, url, headers=headers, timeout=self.timeout, **kwargs)\n        except requests.RequestException as e:\n            raise ApiError(f\"HTTP request failed: {e}\")\n        if resp.status_code >= 500:\n>           raise ApiError(f\"Server error {resp.status_code}: {resp.text}\")\nE           framework.errors.ApiError: Server error 500: {\"message\":\"Unexpected error while creating bunker inquiry.Not found: Port (UNLO: 1111111) - \"}\n\nframework\\api_client.py:66: ApiError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"api","time":{"start":1758205153235,"stop":1758205153238,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"description":"\n        Test Case: List Users API - Validate Response Structure and Content\n\n        Steps:\n        1. Call the API to fetch a paginated list of users (page=1, size=10).\n        2. Assert that the API call returns HTTP 200 (success).\n        3. Assert that the response is a non-empty list.\n        4. Assert that the\n        first user object contains 'id' and 'name' keys.\n\n        Purpose:\n        - To verify that the user listing endpoint returns valid data and expected structure.\n        - To ensure basic integrity of the user objects in the response.\n\n        args: api (ApiDictionary): The API client instance for making requests.\n    ","status":"broken","statusMessage":"framework.errors.ApiError: Server error 500: {\"message\":\"Unexpected error while creating bunker inquiry.Not found: Port (UNLO: 1111111) - \"}","statusTrace":"api = <framework.api_dictionary.ApiDictionary object at 0x0000022FDCBDED80>\n\n    def test_create_bunker_enquiry_with_invalid_mandatory_fields(api: ApiDictionary):\n        \"\"\"\n            Test Case: List Users API - Validate Response Structure and Content\n    \n            Steps:\n            1. Call the API to fetch a paginated list of users (page=1, size=10).\n            2. Assert that the API call returns HTTP 200 (success).\n            3. Assert that the response is a non-empty list.\n            4. Assert that the\n            first user object contains 'id' and 'name' keys.\n    \n            Purpose:\n            - To verify that the user listing endpoint returns valid data and expected structure.\n            - To ensure basic integrity of the user objects in the response.\n    \n            args: api (ApiDictionary): The API client instance for making requests.\n        \"\"\"\n    \n        api.bunker.get_vessels()\n        vessel_imo = api.bunker.get_random_vessels_imo()\n        api.bunker.get_customers()\n        customer_id = api.bunker.get_random_customer_id()\n        api.bunker.get_port()\n        port_unlocode = api.bunker.get_random_ports_unlocode()\n        api.bunker.get_bunker_details()\n        external_id, sulphur_external_id = api.bunker.get_external_and_sulphur_id()\n    \n        delivery_start = datetime.now(timezone.utc)  # timezone-aware datetime\n        delivery_end = delivery_start + timedelta(days=4)  # add 4 days\n    \n        delivery_start_str = delivery_start.isoformat().replace(\"+00:00\", \"Z\")\n        delivery_end_str = delivery_end.isoformat().replace(\"+00:00\", \"Z\")\n        quantity_max = 555\n        # Invalid Customer ID Field\n        api.bunker.generate_payload_bunker_enquiry_create(\"111111\", vessel_imo, port_unlocode,\n                                                          external_id, sulphur_external_id,\n                                                          delivery_start_str, delivery_end_str, quantity_max)\n        api.bunker.create_bunker_enquiry(400)\n        # Invalid Vessel IMO Field --- Backend issue getting 500 instead of 400\n        api.bunker.generate_payload_bunker_enquiry_create(customer_id, \"1111111\", port_unlocode,\n                                                          external_id, sulphur_external_id,\n                                                          delivery_start_str, delivery_end_str, quantity_max)\n        # api.bunker.create_bunker_enquiry(400)\n    \n        # Invalid Port Unlocode Field\n        api.bunker.generate_payload_bunker_enquiry_create(customer_id, vessel_imo, \"1111111\",\n                                                          external_id, sulphur_external_id,\n                                                          delivery_start_str, delivery_end_str, quantity_max)\n>       api.bunker.create_bunker_enquiry(500)\n\ntests\\test_api\\test_bunkers\\test_create_bunker_enquiry.py:137: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\api\\bunker.py:118: in create_bunker_enquiry\n    self.last_response = self.client.post(\nframework\\api_client.py:79: in post\n    return self.request(\"POST\", path, json=json, data=data, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <framework.api_client.ApiClient object at 0x0000022FDCBDD370>, method = 'POST', path = '/api/bunker/create-inquiry'\nkwargs = {'data': None, 'json': {'customer_id': '1FB42898-22F1-4C45-9E69-12779C45A6E3', 'delivery_end_date': '2025-09-22T14:19:...8F8', 'quantity_max': 555, 'quantity_min': None, 'sulphur_external_id': '83FBCC23-AE7D-00C0-DB45-3A19E59B0A43'}], ...}}\nurl = 'https://one.geoserves-test.com/api/bunker/create-inquiry'\nheaders = {'Accept': '*/*', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InNhbWlzaHJhQGdldC1kbWNjLm....FURSJZKDurQEKlgMcaOPEyDxqJTRUMq5hkAMiXptCtI', 'Content-Type': 'application/json', 'User-Agent': 'python-requests/2.x'}\nresp = <Response [500]>\n\n    def request(self, method: str, path: str, **kwargs) -> requests.Response:\n        \"\"\"\n        Make a generic HTTP request using the specified method and path.\n        Handles authentication headers and error handling.\n        \"\"\"\n        url = self._full_url(path)\n        headers = kwargs.pop(\"headers\", {})\n        headers.update(self._auth_header())\n        try:\n            resp = self.session.request(method, url, headers=headers, timeout=self.timeout, **kwargs)\n        except requests.RequestException as e:\n            raise ApiError(f\"HTTP request failed: {e}\")\n        if resp.status_code >= 500:\n>           raise ApiError(f\"Server error {resp.status_code}: {resp.text}\")\nE           framework.errors.ApiError: Server error 500: {\"message\":\"Unexpected error while creating bunker inquiry.Not found: Port (UNLO: 1111111) - \"}\n\nframework\\api_client.py:66: ApiError","steps":[],"attachments":[{"uid":"b42da85e897c4d2a","name":"log","source":"b42da85e897c4d2a.txt","type":"text/plain","size":1995}],"parameters":[],"hasContent":true,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":1},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests.test_api.test_bunkers"},{"name":"suite","value":"test_create_bunker_enquiry"},{"name":"host","value":"DESKTOP-52L9BJU"},{"name":"thread","value":"17880-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_api.test_bunkers.test_create_bunker_enquiry"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"3369e0f59ff51e48.json","parameterValues":[]}